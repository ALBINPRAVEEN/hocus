// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DATABASE_URL")
}

model User {
  id         BigInt @id @default(autoincrement())
  externalId String @unique
  gaUserId   String @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
}

enum LogGroupType {
  LOG_GROUP_TYPE_VM_TASK
}

model LogGroup {
  id      BigInt       @id @default(autoincrement())
  type    LogGroupType
  logs    Log[]
  vmTasks VmTask[]
}

model Log {
  id         BigInt   @id @default(autoincrement())
  logGroup   LogGroup @relation(fields: [logGroupId], references: [id])
  logGroupId BigInt
  idx        Int
  content    Bytes

  @@unique([logGroupId, idx], name: "log_log_event_id_idx_unique")
}

enum PrebuildEventStatus {
  PREBUILD_EVENT_STATUS_PENDING
  PREBUILD_EVENT_STATUS_RUNNING
  PREBUILD_EVENT_STATUS_SUCCESS
  PREBUILD_EVENT_STATUS_ERROR
  PREBUILD_EVENT_STATUS_CANCELLED
  PREBUILD_EVENT_STATUS_SKIPPED
}

model PrebuildEvent {
  id             BigInt                     @id @default(autoincrement())
  tasks          PrebuildEventTask[]
  project        Project                    @relation(fields: [projectId], references: [id])
  projectId      BigInt
  gitObject      GitObject                  @relation(fields: [gitObjectId], references: [id])
  gitObjectId    BigInt
  fsFile         File                       @relation(fields: [fsFileId], references: [id])
  fsFileId       BigInt
  status         PrebuildEventStatus
  gitBranchLinks PrebuildEventToGitBranch[]

  createdAt DateTime @default(now()) @db.Timestamptz(3)
}

model PrebuildEventToGitBranch {
  id              BigInt        @id @default(autoincrement())
  prebuildEvent   PrebuildEvent @relation(fields: [prebuildEventId], references: [id])
  prebuildEventId BigInt
  gitBranch       GitBranch     @relation(fields: [gitBranchId], references: [id])
  gitBranchId     BigInt

  @@unique([prebuildEventId, gitBranchId])
}

model PrebuildEventTask {
  id              BigInt        @id @default(autoincrement())
  idx             Int
  prebuildEvent   PrebuildEvent @relation(fields: [prebuildEventId], references: [id])
  prebuildEventId BigInt
  vmTask          VmTask        @relation(fields: [vmTaskId], references: [id])
  vmTaskId        BigInt
  originalCommand String
}

enum VmTaskStatus {
  VM_TASK_STATUS_PENDING
  VM_TASK_STATUS_RUNNING
  VM_TASK_STATUS_SUCCESS
  VM_TASK_STATUS_ERROR
  VM_TASK_STATUS_CANCELLED
}

model VmTask {
  id                 BigInt              @id @default(autoincrement())
  command            String[]
  cwd                String?
  status             VmTaskStatus
  logGroup           LogGroup            @relation(fields: [logGroupId], references: [id])
  logGroupId         BigInt
  prebuildEventTasks PrebuildEventTask[]
  buildfsEvents      BuildfsEvent[]
}

model BuildfsEvent {
  id             BigInt @id @default(autoincrement())
  vmTask         VmTask @relation(fields: [vmTaskId], references: [id])
  vmTaskId       BigInt
  /// Relative path to the Dockerfile in the `project` directory of the input drive.
  dockerfilePath String
  /// Relative path to the build context in the `project` directory of the input drive.
  contextPath    String
  cacheHash      String
}

enum SshKeyPairType {
  SSH_KEY_PAIR_TYPE_SERVER_CONTROLLED
  SSH_KEY_PAIR_TYPE_USER_SUPPLIED
}

model SshKeyPair {
  id              BigInt          @id @default(autoincrement())
  type            SshKeyPairType
  privateKey      String
  publicKey       String
  gitRepositories GitRepository[]

  createdAt DateTime @default(now()) @db.Timestamptz(3)
}

model GitRepository {
  id           BigInt      @id @default(autoincrement())
  url          String      @unique
  sshKeyPair   SshKeyPair  @relation(fields: [sshKeyPairId], references: [id])
  sshKeyPairId BigInt
  gitBranches  GitBranch[]

  lastBranchUpdateAt DateTime            @default(now()) @db.Timestamptz(3)
  createdAt          DateTime            @default(now()) @db.Timestamptz(3)
  Project            Project[]
  gitRepositoryFiles GitRepositoryFile[]
}

model GitRepositoryFile {
  id              BigInt        @id @default(autoincrement())
  gitRepository   GitRepository @relation(fields: [gitRepositoryId], references: [id])
  gitRepositoryId BigInt
  file            File          @relation(fields: [fileId], references: [id])
  fileId          BigInt
  agentInstance   AgentInstance @relation(fields: [agentInstanceId], references: [id])
  agentInstanceId BigInt

  /// Enforce that agentInstanceId and file.agentInstanceId are the same. 
  fileAgentMatch File @relation("file_agent_match", fields: [fileId, agentInstanceId], references: [id, agentInstanceId])

  createdAt DateTime @default(now()) @db.Timestamptz(3)

  @@unique([gitRepositoryId, fileId])
  @@unique([gitRepositoryId, agentInstanceId])
}

model GitBranch {
  id              BigInt        @id @default(autoincrement())
  name            String
  gitRepository   GitRepository @relation(fields: [gitRepositoryId], references: [id])
  gitRepositoryId BigInt
  gitObjectId     BigInt
  gitObject       GitObject     @relation(fields: [gitObjectId], references: [id])

  updatedAt                DateTime                   @updatedAt @db.Timestamptz(3)
  createdAt                DateTime                   @default(now()) @db.Timestamptz(3)
  PrebuildEventToGitBranch PrebuildEventToGitBranch[]

  @@unique([gitRepositoryId, name])
}

model GitObject {
  id   BigInt @id @default(autoincrement())
  hash String @unique

  createdAt     DateTime        @default(now()) @db.Timestamptz(3)
  gitBranches   GitBranch[]
  PrebuildEvent PrebuildEvent[]
}

model Project {
  id                BigInt        @id @default(autoincrement())
  gitRepository     GitRepository @relation(fields: [gitRepositoryId], references: [id])
  gitRepositoryId   BigInt
  /// relative path to the directory where the `hocus.yml` file is located
  rootDirectoryPath String

  createdAt      DateTime        @default(now()) @db.Timestamptz(3)
  prebuildEvents PrebuildEvent[]
}

model AgentInstance {
  id                BigInt              @id @default(autoincrement())
  externalId        String              @unique
  File              File[]
  GitRepositoryFile GitRepositoryFile[]
}

model File {
  id                 BigInt              @id @default(autoincrement())
  agentInstance      AgentInstance       @relation(fields: [agentInstanceId], references: [id])
  agentInstanceId    BigInt
  /// Should be absolute.
  path               String
  prebuildEvents     PrebuildEvent[]
  gitRepositoryFiles GitRepositoryFile[]
  fileAgentMatch     GitRepositoryFile[] @relation("file_agent_match")

  @@unique([id, agentInstanceId])
  @@unique([agentInstanceId, path])
}
