// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DATABASE_URL")
}

model User {
  id         BigInt @id @default(autoincrement())
  externalId String @unique
  gaUserId   String @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
}

enum LogGroupType {
  LOG_GROUP_TYPE_VM_TASK
}

model LogGroup {
  id      BigInt       @id @default(autoincrement())
  type    LogGroupType
  logs    Log[]
  vmTasks VmTask[]
}

model Log {
  id         BigInt   @id @default(autoincrement())
  logGroup   LogGroup @relation(fields: [logGroupId], references: [id])
  logGroupId BigInt
  idx        Int
  content    Bytes

  @@unique([logGroupId, idx], name: "log_log_event_id_idx_unique")
}

model AgentInstance {
  id             BigInt          @id @default(autoincrement())
  externalId     String          @unique
  prebuildEvents PrebuildEvent[]
}

model PrebuildEvent {
  id              BigInt        @id @default(autoincrement())
  agentInstance   AgentInstance @relation(fields: [agentInstanceId], references: [id])
  agentInstanceId BigInt
  prebuildTasks   VmTask[]
}

enum VmTaskStatus {
  VM_TASK_STATUS_PENDING
  VM_TASK_STATUS_RUNNING
  VM_TASK_STATUS_SUCCESS
  VM_TASK_STATUS_ERROR
  VM_TASK_STATUS_CANCELLED
}

model VmTask {
  id              BigInt        @id @default(autoincrement())
  command         String
  idx             Int
  status          VmTaskStatus
  prebuildEvent   PrebuildEvent @relation(fields: [prebuildEventId], references: [id])
  prebuildEventId BigInt
  logGroup        LogGroup      @relation(fields: [logGroupId], references: [id])
  logGroupId      BigInt
}
