/* tslint:disable */
/* eslint-disable */
/**
 * Firecracker API
 * RESTful public-facing API. The API is accessible through HTTP calls on specific URLs carrying JSON modeled data. The transport medium is a Unix Domain Socket.
 *
 * The version of the OpenAPI document: 1.1.2
 * Contact: compute-capsule@amazon.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Describes the configuration option for the logging capability.
 * @export
 * @interface Logger
 */
export interface Logger {
    /**
     * Set the level. The possible values are case-insensitive.
     * @type {string}
     * @memberof Logger
     */
    level?: LoggerLevelEnum;
    /**
     * Path to the named pipe or file for the human readable log output.
     * @type {string}
     * @memberof Logger
     */
    logPath: string;
    /**
     * Whether or not to output the level in the logs.
     * @type {boolean}
     * @memberof Logger
     */
    showLevel?: boolean;
    /**
     * Whether or not to include the file path and line number of the log's origin.
     * @type {boolean}
     * @memberof Logger
     */
    showLogOrigin?: boolean;
}


/**
 * @export
 */
export const LoggerLevelEnum = {
    Error: 'Error',
    Warning: 'Warning',
    Info: 'Info',
    Debug: 'Debug'
} as const;
export type LoggerLevelEnum = typeof LoggerLevelEnum[keyof typeof LoggerLevelEnum];


/**
 * Check if a given object implements the Logger interface.
 */
export function instanceOfLogger(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "logPath" in value;

    return isInstance;
}

export function LoggerFromJSON(json: any): Logger {
    return LoggerFromJSONTyped(json, false);
}

export function LoggerFromJSONTyped(json: any, ignoreDiscriminator: boolean): Logger {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'level': !exists(json, 'level') ? undefined : json['level'],
        'logPath': json['log_path'],
        'showLevel': !exists(json, 'show_level') ? undefined : json['show_level'],
        'showLogOrigin': !exists(json, 'show_log_origin') ? undefined : json['show_log_origin'],
    };
}

export function LoggerToJSON(value?: Logger | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'level': value.level,
        'log_path': value.logPath,
        'show_level': value.showLevel,
        'show_log_origin': value.showLogOrigin,
    };
}

