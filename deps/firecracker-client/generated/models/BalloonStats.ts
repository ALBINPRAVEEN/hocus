/* tslint:disable */
/* eslint-disable */
/**
 * Firecracker API
 * RESTful public-facing API. The API is accessible through HTTP calls on specific URLs carrying JSON modeled data. The transport medium is a Unix Domain Socket.
 *
 * The version of the OpenAPI document: 1.1.2
 * Contact: compute-capsule@amazon.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Describes the balloon device statistics.
 * @export
 * @interface BalloonStats
 */
export interface BalloonStats {
    /**
     * Target number of pages the device aims to hold.
     * @type {number}
     * @memberof BalloonStats
     */
    targetPages: number;
    /**
     * Actual number of pages the device is holding.
     * @type {number}
     * @memberof BalloonStats
     */
    actualPages: number;
    /**
     * Target amount of memory (in MiB) the device aims to hold.
     * @type {number}
     * @memberof BalloonStats
     */
    targetMib: number;
    /**
     * Actual amount of memory (in MiB) the device is holding.
     * @type {number}
     * @memberof BalloonStats
     */
    actualMib: number;
    /**
     * The amount of memory that has been swapped in (in bytes).
     * @type {number}
     * @memberof BalloonStats
     */
    swapIn?: number;
    /**
     * The amount of memory that has been swapped out to disk (in bytes).
     * @type {number}
     * @memberof BalloonStats
     */
    swapOut?: number;
    /**
     * The number of major page faults that have occurred.
     * @type {number}
     * @memberof BalloonStats
     */
    majorFaults?: number;
    /**
     * The number of minor page faults that have occurred.
     * @type {number}
     * @memberof BalloonStats
     */
    minorFaults?: number;
    /**
     * The amount of memory not being used for any purpose (in bytes).
     * @type {number}
     * @memberof BalloonStats
     */
    freeMemory?: number;
    /**
     * The total amount of memory available (in bytes).
     * @type {number}
     * @memberof BalloonStats
     */
    totalMemory?: number;
    /**
     * An estimate of how much memory is available (in bytes) for starting new applications, without pushing the system to swap.
     * @type {number}
     * @memberof BalloonStats
     */
    availableMemory?: number;
    /**
     * The amount of memory, in bytes, that can be quickly reclaimed without additional I/O. Typically these pages are used for caching files from disk.
     * @type {number}
     * @memberof BalloonStats
     */
    diskCaches?: number;
    /**
     * The number of successful hugetlb page allocations in the guest.
     * @type {number}
     * @memberof BalloonStats
     */
    hugetlbAllocations?: number;
    /**
     * The number of failed hugetlb page allocations in the guest.
     * @type {number}
     * @memberof BalloonStats
     */
    hugetlbFailures?: number;
}

/**
 * Check if a given object implements the BalloonStats interface.
 */
export function instanceOfBalloonStats(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "targetPages" in value;
    isInstance = isInstance && "actualPages" in value;
    isInstance = isInstance && "targetMib" in value;
    isInstance = isInstance && "actualMib" in value;

    return isInstance;
}

export function BalloonStatsFromJSON(json: any): BalloonStats {
    return BalloonStatsFromJSONTyped(json, false);
}

export function BalloonStatsFromJSONTyped(json: any, ignoreDiscriminator: boolean): BalloonStats {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'targetPages': json['target_pages'],
        'actualPages': json['actual_pages'],
        'targetMib': json['target_mib'],
        'actualMib': json['actual_mib'],
        'swapIn': !exists(json, 'swap_in') ? undefined : json['swap_in'],
        'swapOut': !exists(json, 'swap_out') ? undefined : json['swap_out'],
        'majorFaults': !exists(json, 'major_faults') ? undefined : json['major_faults'],
        'minorFaults': !exists(json, 'minor_faults') ? undefined : json['minor_faults'],
        'freeMemory': !exists(json, 'free_memory') ? undefined : json['free_memory'],
        'totalMemory': !exists(json, 'total_memory') ? undefined : json['total_memory'],
        'availableMemory': !exists(json, 'available_memory') ? undefined : json['available_memory'],
        'diskCaches': !exists(json, 'disk_caches') ? undefined : json['disk_caches'],
        'hugetlbAllocations': !exists(json, 'hugetlb_allocations') ? undefined : json['hugetlb_allocations'],
        'hugetlbFailures': !exists(json, 'hugetlb_failures') ? undefined : json['hugetlb_failures'],
    };
}

export function BalloonStatsToJSON(value?: BalloonStats | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'target_pages': value.targetPages,
        'actual_pages': value.actualPages,
        'target_mib': value.targetMib,
        'actual_mib': value.actualMib,
        'swap_in': value.swapIn,
        'swap_out': value.swapOut,
        'major_faults': value.majorFaults,
        'minor_faults': value.minorFaults,
        'free_memory': value.freeMemory,
        'total_memory': value.totalMemory,
        'available_memory': value.availableMemory,
        'disk_caches': value.diskCaches,
        'hugetlb_allocations': value.hugetlbAllocations,
        'hugetlb_failures': value.hugetlbFailures,
    };
}

