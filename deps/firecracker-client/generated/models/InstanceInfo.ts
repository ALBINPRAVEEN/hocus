/* tslint:disable */
/* eslint-disable */
/**
 * Firecracker API
 * RESTful public-facing API. The API is accessible through HTTP calls on specific URLs carrying JSON modeled data. The transport medium is a Unix Domain Socket.
 *
 * The version of the OpenAPI document: 1.1.2
 * Contact: compute-capsule@amazon.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Describes MicroVM instance information.
 * @export
 * @interface InstanceInfo
 */
export interface InstanceInfo {
    /**
     * Application name.
     * @type {string}
     * @memberof InstanceInfo
     */
    appName: string;
    /**
     * MicroVM / instance ID.
     * @type {string}
     * @memberof InstanceInfo
     */
    id: string;
    /**
     * The current detailed state (Not started, Running, Paused) of the Firecracker instance. This value is read-only for the control-plane.
     * @type {string}
     * @memberof InstanceInfo
     */
    state: InstanceInfoStateEnum;
    /**
     * MicroVM hypervisor build version.
     * @type {string}
     * @memberof InstanceInfo
     */
    vmmVersion: string;
}


/**
 * @export
 */
export const InstanceInfoStateEnum = {
    NotStarted: 'Not started',
    Running: 'Running',
    Paused: 'Paused'
} as const;
export type InstanceInfoStateEnum = typeof InstanceInfoStateEnum[keyof typeof InstanceInfoStateEnum];


/**
 * Check if a given object implements the InstanceInfo interface.
 */
export function instanceOfInstanceInfo(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "appName" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "state" in value;
    isInstance = isInstance && "vmmVersion" in value;

    return isInstance;
}

export function InstanceInfoFromJSON(json: any): InstanceInfo {
    return InstanceInfoFromJSONTyped(json, false);
}

export function InstanceInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): InstanceInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'appName': json['app_name'],
        'id': json['id'],
        'state': json['state'],
        'vmmVersion': json['vmm_version'],
    };
}

export function InstanceInfoToJSON(value?: InstanceInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'app_name': value.appName,
        'id': value.id,
        'state': value.state,
        'vmm_version': value.vmmVersion,
    };
}

