/* tslint:disable */
/* eslint-disable */
/**
 * Firecracker API
 * RESTful public-facing API. The API is accessible through HTTP calls on specific URLs carrying JSON modeled data. The transport medium is a Unix Domain Socket.
 *
 * The version of the OpenAPI document: 1.1.2
 * Contact: compute-capsule@amazon.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Defines a vsock device, backed by a set of Unix Domain Sockets, on the host side. For host-initiated connections, Firecracker will be listening on the Unix socket identified by the path `uds_path`. Firecracker will create this socket, bind and listen on it. Host-initiated connections will be performed by connection to this socket and issuing a connection forwarding request to the desired guest-side vsock port (i.e. `CONNECT 52\n`, to connect to port 52). For guest-initiated connections, Firecracker will expect host software to be bound and listening on Unix sockets at `uds_path_<PORT>`. E.g. "/path/to/host_vsock.sock_52" for port number 52.
 * @export
 * @interface Vsock
 */
export interface Vsock {
    /**
     * Guest Vsock CID
     * @type {number}
     * @memberof Vsock
     */
    guestCid: number;
    /**
     * Path to UNIX domain socket, used to proxy vsock connections.
     * @type {string}
     * @memberof Vsock
     */
    udsPath: string;
    /**
     * This parameter has been deprecated since v1.0.0.
     * @type {string}
     * @memberof Vsock
     */
    vsockId?: string;
}

/**
 * Check if a given object implements the Vsock interface.
 */
export function instanceOfVsock(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "guestCid" in value;
    isInstance = isInstance && "udsPath" in value;

    return isInstance;
}

export function VsockFromJSON(json: any): Vsock {
    return VsockFromJSONTyped(json, false);
}

export function VsockFromJSONTyped(json: any, ignoreDiscriminator: boolean): Vsock {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'guestCid': json['guest_cid'],
        'udsPath': json['uds_path'],
        'vsockId': !exists(json, 'vsock_id') ? undefined : json['vsock_id'],
    };
}

export function VsockToJSON(value?: Vsock | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'guest_cid': value.guestCid,
        'uds_path': value.udsPath,
        'vsock_id': value.vsockId,
    };
}

