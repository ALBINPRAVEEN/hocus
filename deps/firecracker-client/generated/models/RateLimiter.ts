/* tslint:disable */
/* eslint-disable */
/**
 * Firecracker API
 * RESTful public-facing API. The API is accessible through HTTP calls on specific URLs carrying JSON modeled data. The transport medium is a Unix Domain Socket.
 *
 * The version of the OpenAPI document: 1.1.2
 * Contact: compute-capsule@amazon.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TokenBucket } from './TokenBucket';
import {
    TokenBucketFromJSON,
    TokenBucketFromJSONTyped,
    TokenBucketToJSON,
} from './TokenBucket';

/**
 * Defines an IO rate limiter with independent bytes/s and ops/s limits. Limits are defined by configuring each of the _bandwidth_ and _ops_ token buckets.
 * @export
 * @interface RateLimiter
 */
export interface RateLimiter {
    /**
     * 
     * @type {TokenBucket}
     * @memberof RateLimiter
     */
    bandwidth?: TokenBucket;
    /**
     * 
     * @type {TokenBucket}
     * @memberof RateLimiter
     */
    ops?: TokenBucket;
}

/**
 * Check if a given object implements the RateLimiter interface.
 */
export function instanceOfRateLimiter(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RateLimiterFromJSON(json: any): RateLimiter {
    return RateLimiterFromJSONTyped(json, false);
}

export function RateLimiterFromJSONTyped(json: any, ignoreDiscriminator: boolean): RateLimiter {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'bandwidth': !exists(json, 'bandwidth') ? undefined : TokenBucketFromJSON(json['bandwidth']),
        'ops': !exists(json, 'ops') ? undefined : TokenBucketFromJSON(json['ops']),
    };
}

export function RateLimiterToJSON(value?: RateLimiter | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'bandwidth': TokenBucketToJSON(value.bandwidth),
        'ops': TokenBucketToJSON(value.ops),
    };
}

