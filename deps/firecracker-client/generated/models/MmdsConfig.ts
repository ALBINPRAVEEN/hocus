/* tslint:disable */
/* eslint-disable */
/**
 * Firecracker API
 * RESTful public-facing API. The API is accessible through HTTP calls on specific URLs carrying JSON modeled data. The transport medium is a Unix Domain Socket.
 *
 * The version of the OpenAPI document: 1.1.2
 * Contact: compute-capsule@amazon.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Defines the MMDS configuration.
 * @export
 * @interface MmdsConfig
 */
export interface MmdsConfig {
    /**
     * Enumeration indicating the MMDS version to be configured.
     * @type {string}
     * @memberof MmdsConfig
     */
    version?: MmdsConfigVersionEnum;
    /**
     * List of the network interface IDs capable of forwarding packets to the MMDS. Network interface IDs mentioned must be valid at the time of this request. The net device model will reply to HTTP GET requests sent to the MMDS address via the interfaces mentioned. In this case, both ARP requests and TCP segments heading to `ipv4_address` are intercepted by the device model, and do not reach the associated TAP device.
     * @type {Array<string>}
     * @memberof MmdsConfig
     */
    networkInterfaces: Array<string>;
    /**
     * A valid IPv4 link-local address.
     * @type {string}
     * @memberof MmdsConfig
     */
    ipv4Address?: string;
}


/**
 * @export
 */
export const MmdsConfigVersionEnum = {
    V1: 'V1',
    V2: 'V2'
} as const;
export type MmdsConfigVersionEnum = typeof MmdsConfigVersionEnum[keyof typeof MmdsConfigVersionEnum];


/**
 * Check if a given object implements the MmdsConfig interface.
 */
export function instanceOfMmdsConfig(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "networkInterfaces" in value;

    return isInstance;
}

export function MmdsConfigFromJSON(json: any): MmdsConfig {
    return MmdsConfigFromJSONTyped(json, false);
}

export function MmdsConfigFromJSONTyped(json: any, ignoreDiscriminator: boolean): MmdsConfig {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'version': !exists(json, 'version') ? undefined : json['version'],
        'networkInterfaces': json['network_interfaces'],
        'ipv4Address': !exists(json, 'ipv4_address') ? undefined : json['ipv4_address'],
    };
}

export function MmdsConfigToJSON(value?: MmdsConfig | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'version': value.version,
        'network_interfaces': value.networkInterfaces,
        'ipv4_address': value.ipv4Address,
    };
}

