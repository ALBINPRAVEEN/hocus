/* tslint:disable */
/* eslint-disable */
/**
 * Firecracker API
 * RESTful public-facing API. The API is accessible through HTTP calls on specific URLs carrying JSON modeled data. The transport medium is a Unix Domain Socket.
 *
 * The version of the OpenAPI document: 1.1.2
 * Contact: compute-capsule@amazon.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Balloon } from './Balloon';
import {
    BalloonFromJSON,
    BalloonFromJSONTyped,
    BalloonToJSON,
} from './Balloon';
import type { BootSource } from './BootSource';
import {
    BootSourceFromJSON,
    BootSourceFromJSONTyped,
    BootSourceToJSON,
} from './BootSource';
import type { Drive } from './Drive';
import {
    DriveFromJSON,
    DriveFromJSONTyped,
    DriveToJSON,
} from './Drive';
import type { Logger } from './Logger';
import {
    LoggerFromJSON,
    LoggerFromJSONTyped,
    LoggerToJSON,
} from './Logger';
import type { MachineConfiguration } from './MachineConfiguration';
import {
    MachineConfigurationFromJSON,
    MachineConfigurationFromJSONTyped,
    MachineConfigurationToJSON,
} from './MachineConfiguration';
import type { Metrics } from './Metrics';
import {
    MetricsFromJSON,
    MetricsFromJSONTyped,
    MetricsToJSON,
} from './Metrics';
import type { MmdsConfig } from './MmdsConfig';
import {
    MmdsConfigFromJSON,
    MmdsConfigFromJSONTyped,
    MmdsConfigToJSON,
} from './MmdsConfig';
import type { NetworkInterface } from './NetworkInterface';
import {
    NetworkInterfaceFromJSON,
    NetworkInterfaceFromJSONTyped,
    NetworkInterfaceToJSON,
} from './NetworkInterface';
import type { Vsock } from './Vsock';
import {
    VsockFromJSON,
    VsockFromJSONTyped,
    VsockToJSON,
} from './Vsock';

/**
 * 
 * @export
 * @interface FullVmConfiguration
 */
export interface FullVmConfiguration {
    /**
     * 
     * @type {Balloon}
     * @memberof FullVmConfiguration
     */
    balloon?: Balloon;
    /**
     * Configurations for all block devices.
     * @type {Array<Drive>}
     * @memberof FullVmConfiguration
     */
    drives?: Array<Drive>;
    /**
     * 
     * @type {BootSource}
     * @memberof FullVmConfiguration
     */
    bootSource?: BootSource;
    /**
     * 
     * @type {Logger}
     * @memberof FullVmConfiguration
     */
    logger?: Logger;
    /**
     * 
     * @type {MachineConfiguration}
     * @memberof FullVmConfiguration
     */
    machineConfig?: MachineConfiguration;
    /**
     * 
     * @type {Metrics}
     * @memberof FullVmConfiguration
     */
    metrics?: Metrics;
    /**
     * 
     * @type {MmdsConfig}
     * @memberof FullVmConfiguration
     */
    mmdsConfig?: MmdsConfig;
    /**
     * Configurations for all net devices.
     * @type {Array<NetworkInterface>}
     * @memberof FullVmConfiguration
     */
    networkInterfaces?: Array<NetworkInterface>;
    /**
     * 
     * @type {Vsock}
     * @memberof FullVmConfiguration
     */
    vsock?: Vsock;
}

/**
 * Check if a given object implements the FullVmConfiguration interface.
 */
export function instanceOfFullVmConfiguration(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function FullVmConfigurationFromJSON(json: any): FullVmConfiguration {
    return FullVmConfigurationFromJSONTyped(json, false);
}

export function FullVmConfigurationFromJSONTyped(json: any, ignoreDiscriminator: boolean): FullVmConfiguration {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'balloon': !exists(json, 'balloon') ? undefined : BalloonFromJSON(json['balloon']),
        'drives': !exists(json, 'drives') ? undefined : ((json['drives'] as Array<any>).map(DriveFromJSON)),
        'bootSource': !exists(json, 'boot-source') ? undefined : BootSourceFromJSON(json['boot-source']),
        'logger': !exists(json, 'logger') ? undefined : LoggerFromJSON(json['logger']),
        'machineConfig': !exists(json, 'machine-config') ? undefined : MachineConfigurationFromJSON(json['machine-config']),
        'metrics': !exists(json, 'metrics') ? undefined : MetricsFromJSON(json['metrics']),
        'mmdsConfig': !exists(json, 'mmds-config') ? undefined : MmdsConfigFromJSON(json['mmds-config']),
        'networkInterfaces': !exists(json, 'network-interfaces') ? undefined : ((json['network-interfaces'] as Array<any>).map(NetworkInterfaceFromJSON)),
        'vsock': !exists(json, 'vsock') ? undefined : VsockFromJSON(json['vsock']),
    };
}

export function FullVmConfigurationToJSON(value?: FullVmConfiguration | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'balloon': BalloonToJSON(value.balloon),
        'drives': value.drives === undefined ? undefined : ((value.drives as Array<any>).map(DriveToJSON)),
        'boot-source': BootSourceToJSON(value.bootSource),
        'logger': LoggerToJSON(value.logger),
        'machine-config': MachineConfigurationToJSON(value.machineConfig),
        'metrics': MetricsToJSON(value.metrics),
        'mmds-config': MmdsConfigToJSON(value.mmdsConfig),
        'network-interfaces': value.networkInterfaces === undefined ? undefined : ((value.networkInterfaces as Array<any>).map(NetworkInterfaceToJSON)),
        'vsock': VsockToJSON(value.vsock),
    };
}

