/* tslint:disable */
/* eslint-disable */
/**
 * Firecracker API
 * RESTful public-facing API. The API is accessible through HTTP calls on specific URLs carrying JSON modeled data. The transport medium is a Unix Domain Socket.
 *
 * The version of the OpenAPI document: 1.1.2
 * Contact: compute-capsule@amazon.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RateLimiter } from './RateLimiter';
import {
    RateLimiterFromJSON,
    RateLimiterFromJSONTyped,
    RateLimiterToJSON,
} from './RateLimiter';

/**
 * 
 * @export
 * @interface Drive
 */
export interface Drive {
    /**
     * 
     * @type {string}
     * @memberof Drive
     */
    driveId: string;
    /**
     * Represents the caching strategy for the block device.
     * @type {string}
     * @memberof Drive
     */
    cacheType?: DriveCacheTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof Drive
     */
    isReadOnly: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Drive
     */
    isRootDevice: boolean;
    /**
     * Represents the unique id of the boot partition of this device. It is optional and it will be taken into account only if the is_root_device field is true.
     * @type {string}
     * @memberof Drive
     */
    partuuid?: string;
    /**
     * Host level path for the guest drive
     * @type {string}
     * @memberof Drive
     */
    pathOnHost: string;
    /**
     * 
     * @type {RateLimiter}
     * @memberof Drive
     */
    rateLimiter?: RateLimiter;
    /**
     * Type of the IO engine used by the device. "Async" is supported on host kernels newer than 5.10.51.
     * @type {string}
     * @memberof Drive
     */
    ioEngine?: DriveIoEngineEnum;
}


/**
 * @export
 */
export const DriveCacheTypeEnum = {
    Unsafe: 'Unsafe',
    Writeback: 'Writeback'
} as const;
export type DriveCacheTypeEnum = typeof DriveCacheTypeEnum[keyof typeof DriveCacheTypeEnum];

/**
 * @export
 */
export const DriveIoEngineEnum = {
    Sync: 'Sync',
    Async: 'Async'
} as const;
export type DriveIoEngineEnum = typeof DriveIoEngineEnum[keyof typeof DriveIoEngineEnum];


/**
 * Check if a given object implements the Drive interface.
 */
export function instanceOfDrive(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "driveId" in value;
    isInstance = isInstance && "isReadOnly" in value;
    isInstance = isInstance && "isRootDevice" in value;
    isInstance = isInstance && "pathOnHost" in value;

    return isInstance;
}

export function DriveFromJSON(json: any): Drive {
    return DriveFromJSONTyped(json, false);
}

export function DriveFromJSONTyped(json: any, ignoreDiscriminator: boolean): Drive {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'driveId': json['drive_id'],
        'cacheType': !exists(json, 'cache_type') ? undefined : json['cache_type'],
        'isReadOnly': json['is_read_only'],
        'isRootDevice': json['is_root_device'],
        'partuuid': !exists(json, 'partuuid') ? undefined : json['partuuid'],
        'pathOnHost': json['path_on_host'],
        'rateLimiter': !exists(json, 'rate_limiter') ? undefined : RateLimiterFromJSON(json['rate_limiter']),
        'ioEngine': !exists(json, 'io_engine') ? undefined : json['io_engine'],
    };
}

export function DriveToJSON(value?: Drive | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'drive_id': value.driveId,
        'cache_type': value.cacheType,
        'is_read_only': value.isReadOnly,
        'is_root_device': value.isRootDevice,
        'partuuid': value.partuuid,
        'path_on_host': value.pathOnHost,
        'rate_limiter': RateLimiterToJSON(value.rateLimiter),
        'io_engine': value.ioEngine,
    };
}

